default:
  image: python:3.10

stages:
  - lint
  - test
  - build
  - deploy
  
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip

#Linting stage to check code style with Black
lint:
  stage: lint
  script:
    - pip install black
    - black --check --diff .
  allow_failure: false

#Linting stage to check code style with pylint 
pylint:
  stage: lint
  script:
    - pip install pylint pylint-exit anybadge
    - pylint cosmologix/*.py | tee pylint.txt || pylint-exit $?
    - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
    - echo "Pylint score was $score"
    - anybadge -l pylint -v $score -f pylint.svg 2=red 4=orange 8=yellow 10=green
  artifacts:
    paths:
      - pylint.svg


# Testing stage to run your tests
test:
  stage: test
  script:
    - pip install -e .[test]
    - pytest -v --junitxml=report.xml --cov-report=term --cov-report xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - report.xml
      - coverage.xml
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  allow_failure: false


# Building the package stage
build:
  stage: build
  script:
    - pip install setuptools wheel build
    - python -m build --sdist --wheel
    - ls -l dist/
  artifacts:
    expire_in: 1 week
    paths:
      - dist/*
  allow_failure: false

pypi:
  # publish the source distribution on https://pypi.org/project/stardiceonline/, only when
  # a new tag
  stage: deploy
  needs: ["build"]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pip install twine
    - twine upload --non-interactive --repository pypi dist/*

pages:
  stage: deploy
  script:
  - pip install .
  - pip install --no-cache-dir sphinx
  - cd doc
  - sphinx-apidoc -s rst -e -o ./ ../cosmologix
  - sphinx-build -b html . ../public
  artifacts:
    paths:
    - public


# Optional: Publish to PyPI (This step is commented out and should only be enabled for your main branch or when you're ready to publish)
#publish:
#  stage: deploy
#  image: python:3.9
#  script:
#    - pip install twine
#    - twine upload --repository-url ${PYPI_REPOSITORY_URL} -u __token__ -p ${PYPI_API_TOKEN} dist/*
#  only:
#    - main  # or your release branch name
#  environment:
#    name: production